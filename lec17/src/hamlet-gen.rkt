#lang at-exp racket
(require racket/runtime-path)

(define hamlet.txt "/Users/robby/git/tov/ipd/hw/08/test-files/hamlet-ascii.txt")
(define-runtime-path hamlet.cpp "hamlet.cpp")

(define hamlet-source @list|{
 // This file was generated by running hamlet-gen.rkt.
 #include "hamlet.h"
 #include <vector>

 struct Hamlet
 {
     Hamlet();
     std::vector<std::string> text;
 };

 std::vector<std::string> const& get_hamlet()
 {
     static Hamlet hamlet;
     return hamlet.text;
 }

 Hamlet::Hamlet()
 {
    |@(call-with-input-file hamlet.txt
        (λ (port)
          (for/list ([line (in-lines port)]
                     [i (in-naturals)])
            (define fmt "text.emplace_back(\"~a\");\n")
            (unless (zero? i) (set! fmt (string-append "    " fmt)))
            (format fmt (regexp-replace* #rx"\"" line "'")))))
 }}|)

(module+ main
  (call-with-output-file hamlet.cpp
    (λ (out-port)
      (let loop ([hamlet-source hamlet-source])
        (match hamlet-source
          [(cons hd tl)
           (loop hd)
           (loop tl)]
          ['() (void)]
          [(? string?)
           (display hamlet-source out-port)])))
    #:exists 'truncate))
