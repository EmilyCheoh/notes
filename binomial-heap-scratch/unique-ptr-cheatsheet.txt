Type:

   std::unique_ptr<T>

This is the type of a pointer that points to `T`.

These help you maintain the invariant that each hunk of memory is
pointed to by at most one pointer. And thus if a pointer goes out
of scope, the memory it points at can be freed (as there are no
other pointers anywhere!)

Operations:

  std::swap(p1,p2)
   Swaps the pointers so that `p1` now points where
   `p2` used to point and vice-versa.

  std::move(p1)
   Updates `p1` so that it is the null pointer and returns
   a new pointer that points where `p1` used to point. This is
   handy to pass a pointer to a function; use move in the arguments
   and then the function will have the pointer and you won't.

  std::make_unique<T>(x,y,z)
   Allocates a new pointer, pointing at a value of type `T`. The
   `(x,y,z)` are treated as the arguments to the constructor
   for `T`.
